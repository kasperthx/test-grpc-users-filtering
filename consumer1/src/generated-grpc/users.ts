// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: users.proto

/* eslint-disable */
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import * as _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export interface GetFilteredUsersRequest {
}

export interface GetFilteredUsersResponse {
  data: UserDto[];
}

export interface UserDto {
  id: number;
  name: string;
  age: number;
}

export const USERS_PACKAGE_NAME = "users";

function createBaseGetFilteredUsersRequest(): GetFilteredUsersRequest {
  return {};
}

export const GetFilteredUsersRequest = {
  encode(_: GetFilteredUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFilteredUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFilteredUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseGetFilteredUsersResponse(): GetFilteredUsersResponse {
  return { data: [] };
}

export const GetFilteredUsersResponse = {
  encode(message: GetFilteredUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.data) {
      UserDto.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFilteredUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFilteredUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data.push(UserDto.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseUserDto(): UserDto {
  return { id: 0, name: "", age: 0 };
}

export const UserDto = {
  encode(message: UserDto, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.age !== 0) {
      writer.uint32(24).int32(message.age);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserDto {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.age = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

export interface UsersServiceClient {
  getFilteredUsers(request: GetFilteredUsersRequest): Observable<GetFilteredUsersResponse>;
}

export interface UsersServiceController {
  getFilteredUsers(
    request: GetFilteredUsersRequest,
  ): Promise<GetFilteredUsersResponse> | Observable<GetFilteredUsersResponse> | GetFilteredUsersResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getFilteredUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";

export type UsersServiceService = typeof UsersServiceService;
export const UsersServiceService = {
  getFilteredUsers: {
    path: "/users.UsersService/GetFilteredUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFilteredUsersRequest) => Buffer.from(GetFilteredUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFilteredUsersRequest.decode(value),
    responseSerialize: (value: GetFilteredUsersResponse) =>
      Buffer.from(GetFilteredUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFilteredUsersResponse.decode(value),
  },
} as const;

export interface UsersServiceServer extends UntypedServiceImplementation {
  getFilteredUsers: handleUnaryCall<GetFilteredUsersRequest, GetFilteredUsersResponse>;
}
